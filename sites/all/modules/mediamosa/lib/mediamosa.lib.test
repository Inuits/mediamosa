<?php
/**
 * @file
 * Unittests to test funcions from the lib.
 */

class MediaMosaMkdir extends MediaMosaTestCase {
  // ------------------------------------------------------------------ Members.
  // ---------------------------------------------------------------- Functions.
  /**
   * Implement getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'MediaMosa library - mkdir()',
      'description' => 'Test if mkdir recursively correctly sets the chmod of the dirs.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_LIBRARY,
    );
  }

  /**
   * Ending the test.
   */
  protected function tearDown() {
    // Determine test sannas dir.
    $storage = mediamosa_storage::get_realpath();

    drupal_rmdir($storage . 'foo');
    drupal_rmdir($storage . 'bar' . DIRECTORY_SEPARATOR . 'foo');
    drupal_rmdir($storage . 'bar');
    drupal_rmdir($storage . 'baz' . DIRECTORY_SEPARATOR . 'bar' . DIRECTORY_SEPARATOR . 'foo');
    drupal_rmdir($storage . 'baz' . DIRECTORY_SEPARATOR . 'bar');
    drupal_rmdir($storage . 'baz');

    // Determine test sannas dir.
    $storage = 'mediamosa-storage-transition-links://';

    drupal_rmdir($storage . 'foouri');
    drupal_rmdir($storage . 'baruri' . DIRECTORY_SEPARATOR . 'foo');
    drupal_rmdir($storage . 'baruri');
    drupal_rmdir($storage . 'bazuri' . DIRECTORY_SEPARATOR . 'bar' . DIRECTORY_SEPARATOR . 'foo');
    drupal_rmdir($storage . 'bazuri' . DIRECTORY_SEPARATOR . 'bar');
    drupal_rmdir($storage . 'bazuri');

    parent::teardown();
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Test the mkdir() function.
   */
  public function testMkdir() {
    // My app ID.
    $app_id = rand(1000, 1100);

    // Determine test sannas dir.
    $storage = mediamosa_storage::get_realpath();

    // Call mkdir.
    $path = $storage . 'foo';
    mediamosa_io::mkdir($path, TRUE, 0775);

    $perms = substr(sprintf('%o', fileperms($path)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('foo'): $perms");

    // Call mkdir with 2 levels deep.
    $path = $storage . 'bar' . DIRECTORY_SEPARATOR . 'foo';

    mediamosa_io::mkdir($path, TRUE, 0775);
    $perms = substr(sprintf('%o', fileperms($path)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('bar/foo'): $perms");
    $perms = substr(sprintf('%o', fileperms($storage . 'bar')), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of bar after mkdir('bar/foo'): $perms");

    // Call mkdir with 3 levels deep.
    $path = $storage . 'baz' . DIRECTORY_SEPARATOR . 'bar' . DIRECTORY_SEPARATOR . 'foo';

    mediamosa_io::mkdir($path, TRUE, 0775);
    $perms = substr(sprintf('%o', fileperms($path)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('baz/bar/foo'): $perms");
    $perms = substr(sprintf('%o', fileperms($storage . 'baz' . DIRECTORY_SEPARATOR . 'bar')), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of bar after mkdir('baz/bar/foo'): $perms");
    $perms = substr(sprintf('%o', fileperms($storage . 'baz')), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of baz after mkdir('baz/bar/foo'): $perms");

    /**
     * Same test, but with uri->data->transcode.
     */

    // Determine test sannas dir.
    $storage = 'mediamosa-storage-transition-links://';

    // Call mkdir.
    $uri = $storage . 'foouri';
    mediamosa_io::mkdir($uri, TRUE, 0775);

    $realpath = mediamosa_io::realpath($uri);
    $this->dir_exists($uri);
    $this->dir_exists($realpath);

    $perms = substr(sprintf('%o', fileperms($realpath)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('foouri'): $perms");

    // Call mkdir with 2 levels deep.
    $uri = $storage . 'baruri' . DIRECTORY_SEPARATOR . 'foo';
    mediamosa_io::mkdir($uri, TRUE, 0775);

    $realpath = mediamosa_io::realpath($uri);
    $this->dir_exists($uri);
    $this->dir_exists($realpath);

    $perms = substr(sprintf('%o', fileperms($realpath)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('baruri/foo'): $perms");
    $perms = substr(sprintf('%o', fileperms(mediamosa_io::realpath($storage . 'baruri'))), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of bar after mkdir('baruri/foo'): $perms");

    // Call mkdir with 3 levels deep.
    $uri = $storage . 'bazuri' . DIRECTORY_SEPARATOR . 'bar' . DIRECTORY_SEPARATOR . 'foo';
    mediamosa_io::mkdir($uri, TRUE, 0775);

    $realpath = mediamosa_io::realpath($uri);
    $this->dir_exists($uri);
    $this->dir_exists($realpath);

    $perms = substr(sprintf('%o', fileperms($realpath)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('bazuri/bar/foo'): $perms");
    $perms = substr(sprintf('%o', fileperms(mediamosa_io::realpath($storage . 'bazuri' . DIRECTORY_SEPARATOR . 'bar'))), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of bar after mkdir('bazuri/bar/foo'): $perms");
    $perms = substr(sprintf('%o', fileperms(mediamosa_io::realpath($storage . 'bazuri'))), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of baz after mkdir('bazuri/bar/foo'): $perms");

    // Call mkdir with mediafile ID.
    $uri = $storage . mediamosa_io_streamwrapper::create_uri_mediafile_id_path(mediamosa_db::uuid($app_id));
    $this->pass($uri);
    mediamosa_io::mkdir($uri, TRUE, 0775);

    $realpath = mediamosa_io::realpath($uri);
    $this->dir_exists($uri);
    $this->dir_exists($realpath);

    $perms = substr(sprintf('%o', fileperms($realpath)), -4);
    $this->assertEqual($perms, '0775', "Testing chmod rights of foo after mkdir('" . $uri . "'): $perms");

    $uri = $storage . '2' . mediamosa_io_streamwrapper::create_uri_mediafile_id_path(mediamosa_db::uuid($app_id));
    $this->pass($uri);
    mediamosa_io::mkdir($uri, TRUE, 0775);

    $realpath = mediamosa_io::realpath($uri);
    $this->dir_exists($uri);
    $this->dir_exists($realpath);

    drupal_rmdir($uri);
  }
}

class MediaMosaTypeValidation extends MediaMosaTestCase {
  // ------------------------------------------------------------------ Members.
  // ---------------------------------------------------------------- Functions.
  /**
   * Implement getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'MediaMosa library - Type validation',
      'description' => 'Test for type validation layer.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_LIBRARY,
    );
  }

  /**
   * Check the input based on type.
   *
   * Will throw exception if not met with conditions.
   *
   * @param string $param
   *   Name of param.
   * @param string $param_type
   *   Type of the param, see TYPE_* list.
   * @param mixed $mixed_param_value
   *   Either string or array (with strings)
   * @param boolean $is_required
   *   Supplied value must be provided
   *
   * @return mixed
   *   The process parameter value or FALSE.
   */
  protected function check($param, $param_type, $mixed_param_value, $is_required = FALSE, $range_start = NULL, $range_end = NULL, $allowed_values = NULL) {
    try {
      return mediamosa_type::check($param, $param_type, $mixed_param_value, $is_required, $range_start, $range_end, $allowed_values);
    }
    catch (Exception $e) {
      // Get caller function.
      $caller = $this->getAssertionCall();

      $this->fail(
        t('@message in (line @line of @file).',
          array(
            '@message' => $e->getMessage(),
            '@line' => $caller['line'],
            '@file' => $caller['file'],
          )
        ),
        'Exception'
      );
    }

    return FALSE;
  }

  // -------------------------------------------------------------------- Tests.
  /**
   * Test our type library validation.
   */
  public function testTypeLib() {
    // This command fails on 3.2.1, which it should not.
    $commands = array('-aspect' => '16:9');

    // Validate.
    $this->check('command', mediamosa_sdk::TYPE_COMMAND, mediamosa_transcode_profile::arrayToCommand($commands));

    // This command fails on 3.2.1, which it should not.
    $commands = array('-acodec' => 'libfaac', '-aspect' => '16:9');

    // Validate.
    $this->check('command', mediamosa_sdk::TYPE_COMMAND, mediamosa_transcode_profile::arrayToCommand($commands));

    // This command fails on 3.2.1, which it should not.
    $commands = array(
      '-acodec' => 'libfaac',
      '-ab' => '256000',
      '-ar' => '44100',
      '-ac' => '2',
      '-vcodec' => 'libx264',
      '-vpre' => 'main',
      '-profile' => 'main',
      '-pass' => '2',
      '-b' => '1200000',
      '-aspect' => '16:9',
      '-s' => '640x360',
      '-vf' => "'pad=640:360:0:0:black'",
    );

    // Validate.
    $this->check('command', mediamosa_sdk::TYPE_COMMAND, mediamosa_transcode_profile::arrayToCommand($commands));
  }
}
