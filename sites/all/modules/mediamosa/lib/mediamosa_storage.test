<?php
/**
 * @file
 * Test our MountPoint stream wrapper.
 */

class MediaMosaMountPointTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'MediaMosa - Library stream wrapper tests',
      'description' => 'Testing the steam wrapper classes.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_LIBRARY,
    );
  }


  function testTicket615() {
    $uuid = mediamosa_db::uuid(1);

    $uris = array(
      mediamosa_storage::get_uri_data(),
      mediamosa_storage::get_uri_media_download_ticket(),
      mediamosa_storage::get_uri_media_ticket(),
      mediamosa_storage::get_uri_data_transcode(),
    );

    foreach ($uris as $uri) {
      $this->pass(t('Trying to create directory; @uri (@realpath)', array('@uri' => $uri, '@realpath' => mediamosa_io::realpath($uri))));

      // Create location first.
      $this->mkdir($uri);


      $uri .= $uuid;

      $this->pass(t('Trying to create file; @uri (@realpath)', array('@uri' => $uri, '@realpath' => mediamosa_io::realpath($uri))));

      $this->assertTrue(mediamosa_io::touch($uri), t('Check if @uri (@realpath) can be created by MediaMosa.', array('@uri' => $uri, '@realpath' => mediamosa_io::realpath($uri))));
      $this->assertTrue(mediamosa_io::unlink($uri), t('Check if @uri (@realpath) can be deleted by MediaMosa.', array('@uri' => $uri, '@realpath' => mediamosa_io::realpath($uri))));
    }
  }
}
