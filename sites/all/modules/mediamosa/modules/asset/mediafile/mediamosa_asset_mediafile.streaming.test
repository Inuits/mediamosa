<?php

/**
 * @file
 * Live Streaming server support
 */

class MediaMosaAssetMediafileStreamingTestCaseEga extends MediaMosaTestCaseEga {
  // ---------------------------------------------------------------- Functions.
  public static function getInfo() {
    return array(
      'name' => 'Mediafile - live streaming support',
      'description' => 'Live Streaming server support.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_ASSET_MEDIAFILE,
    );
  }

  // -------------------------------------------------------------------- Tests.
  public function testStreaming() { // Ticket #82

    // Create asset.
    $asset_id = $this->createAsset();

    // Create mediafile with uri.
    $parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'rtsp://domain.ext/file',
    );

    // Create mediafile.
    $mediafile_id = $this->createMediafile($asset_id, $parameters);

    // Get the mediafile.
    $mediafile = $this->getMediafile($mediafile_id);

    // Must match.
    $this->assertTrue($mediafile[mediamosa_asset_mediafile_db::URI] == 'rtsp://domain.ext/file', 'Uri saved correctly.');
    $this->assertTrue(empty($mediafile[mediamosa_asset_mediafile_db::FILENAME]), 'Filename must be empty.');

    // Now try with file, must fail.

    // Create mediafile with file.
    $parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'rtsp://domain.ext/file',
      mediamosa_rest_call_create_mediafile::FILENAME => 'notallowed.mp4',
    );

    // Create mediafile.
    $this->createMediafile($asset_id, $parameters, array(mediamosa_error::ERRORCODE_MIX_OF_URI_AND_FILE), TRUE);


    // Update mediafile with uri and filename (must fail).
    $parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'rtsp://domain.ext/other_file',
      mediamosa_rest_call_create_mediafile::FILENAME => 'notallowed.mp4',
    );

    // Update mediafile.
    $this->updateMediafile($mediafile_id, $parameters, array(mediamosa_error::ERRORCODE_MIX_OF_URI_AND_FILE), TRUE);


    // Update mediafile with uri (must succeed).
    $parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'rtsp://domain.ext/other_file',
    );

    // Update mediafile.
    $this->updateMediafile($mediafile_id, $parameters);

    // Get the mediafile.
    $mediafile = $this->getMediafile($mediafile_id);

    // Must match.
    $this->assertTrue($mediafile[mediamosa_asset_mediafile_db::URI] == 'rtsp://domain.ext/other_file', 'Uri updated correctly.');
    $this->assertTrue(empty($mediafile[mediamosa_asset_mediafile_db::FILENAME]), 'Filename must be empty.');

    // Update mediafile with uri empty and filename set.
    $parameters = array(
      mediamosa_rest_call_create_mediafile::URI => '',
      mediamosa_rest_call_create_mediafile::FILENAME => 'notallowed.mp4',
    );

    // Update mediafile.
    $this->updateMediafile($mediafile_id, $parameters, array(mediamosa_error::ERRORCODE_MIX_OF_URI_AND_FILE), TRUE);
  }
}
