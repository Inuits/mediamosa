<?php
/**
 * @file
 * MediaMosa Storage / SAN/NAS unittests.
 */

class MediaMosaMediaDownloadTestCase extends MediaMosaTestCaseEga {

  public static function getInfo() {
    return array(
      'name' => 'Media - Download test',
      'description' => 'Test downloading of files with tickets.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_MEDIA,
    );
  }

  function setUp() {
    // Get the current mediamosa server content.
    $servers = mediamosa_server::search();

    parent::setUp('mediamosa_asset');

    // Create and login user
    $rest_user = $this->drupalCreateUser(array(mediamosa_permission::ADMIN_MEDIAMOSA));
    $this->drupalLogin($rest_user);

    // Truncate current and insert new.
    db_truncate(mediamosa_server_db::TABLE_NAME)->execute();

    // Copy the current servers to sandbox.
    foreach ($servers as $server) {
      db_insert(mediamosa_server_db::TABLE_NAME)
        ->fields($server)
        ->execute();
    }
  }

  function testTicket616() {

    $app = $this->createApp();
    $app_id = $app[mediamosa_app_db::APP_ID];
    $ticket_id = mediamosa_db::uuid(1);
    $filename = "plus'q %20uote";

    // Create upload file.
    $upload = $this->uploadTestFile(array('filename' => $filename));
//    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    $mediafile = $this->getMediafile($mediafile_id);

    // Create ticket.
    $ticket_id = mediamosa_media::process_media_view($app_id, $mediafile, mediamosa_media::RESPONSE_DOWNLOAD);

    // For cleanup.
    $ticket_symlink = mediamosa_storage::get_realpath_media_permanent_file($app_id, $ticket_id, $filename);

    $this->assertTrue(mediamosa_io::is_link($ticket_symlink), 'Is symlink: ' . $ticket_symlink);
    $this->assertTrue(mediamosa_io::file_exists($ticket_symlink, TRUE), 'Symlink found: ' . $ticket_symlink);

    $download_servers = mediamosa_server::get_enabled_download();
    $this->assertTrue(!empty($download_servers), t('@num enabled download server(s) found.', array('@num' => $download_servers->rowCount())));

    foreach ($download_servers as $download_server) {
      $url = str_replace('{TICKET}', $ticket_id . '/' . urlencode($filename), mediamosa_server::get_server_url($download_server));

      $this->pass('URL: ' . $url);

      // Get the file.
      $result = mediamosa_http::drupal_http_request($url);

      // Check response.
      $this->assertTrue(
        $result->code == 200,
        t("Download the test video from '@url' (code = @code)", array('@url' => $url, '@code' => $result->code))
      );

      // print header.
      $this->var_export($result->headers);

      $this->var_export(mediamosa_io::filesize($test_video), 'File original size');
      $this->var_export(strlen($result->data), 'File download size');

      if (strlen($result->data) < mediamosa_io::filesize($test_video)) {
        $this->var_export_fail($result->data);
      }

      // What we got downloaded, must be the same in size.
      $this->assertTrue(mediamosa_io::filesize($test_video) == strlen($result->data), 'Download size matches the original media size.');

      unset($result);
    }

    // Remove the test file.
    $this->unlink($target);
  }
}
