<?php
/**
 * @file
 * Play proxy still unittests.
 */

class MediaMosaMediaTicketCleanupTestCaseEgaJob extends MediaMosaTestCaseEgaJob {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Media - Ticket / files cleanup',
      'description' => 'Tests if the media tickets are cleaned up and temporary files are removed when deleted.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_MEDIA,
    );
  }

  /**
   * Check ticket and files cleanup.
   */
  public function testMediaTicketCleanup() {
    // App ids.
    $app_id_1 = $this->a_app[mediamosa_app_db::APP_ID];

    $upload = $this->uploadTestFile(array('filename' => $this->getTestVideo_ogg()));
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    $job_id = $this->createMediafileStill($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the asset, so we have the still.
    $asset = $this->getAsset($asset_id);

    $still_servers = mediamosa_server::get_enabled_still();
    $this->assertTrue(!empty($still_servers), t('@num enabled still server(s) found.', array('@num' => $still_servers->rowCount())));

    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);
    $this->assertTrue(count($stills) == 1, 'Found one still.');

    $still = reset($stills);
    $this->var_export($still);

    // Do media play call and create a symlink.
    // Test the output, do output call.
    $permanent_still_url = str_replace('/media/', '/media/simpletest/media/', $still['output']);

    // Get the file.
    $result = mediamosa_http::drupal_http_request($permanent_still_url);

    // Check response.
    $this->assertTrue(
      $result->code == 200,
      t("Download the test image from permanent link '@url' (code = @code)", array('@url' => $permanent_still_url, '@code' => $result->code))
    );

    $still_id = $still['stills']['still_id'];
    $this->assertFalse(empty($still_id), 'Found still ID.');

    // Check if symlink exists.
    $sympath = mediamosa_storage::get_uri_media_file($app_id_1, $still_id) . '.' . mediamosa_asset_mediafile::get_file_extension($still);

    $this->var_export($sympath);

    // Must exists.
    $this->file_exists($sympath);

    // Add ACL rule.
    $parameters = array(
      'acl_domain' => 'foo.nl',
    );
    $this->setMediafileAcl($still_id, $parameters);

    // Must not exists, symlink must be removed.
    $this->file_not_exists($sympath);

    // Check removal of ticket link.

    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);
    $this->assertTrue(count($stills) == 1, 'Found still.');

    // Get first array.
    $stills = $stills[0];

    // Still list.
    $a_still_list = $stills['stills'];

    $this->var_export($stills);

    // Test the output, do output call.
    $permanent_still_url = str_replace('/media/', '/media/simpletest/media/', $stills['output']);

    // Get the file using ticket.
    $result = mediamosa_http::drupal_http_request($permanent_still_url);

    // Check response.
    $this->assertTrue(
      $result->code == 200,
      t("Download the test image from permanent link '@url' (code = @code)", array('@url' => $permanent_still_url, '@code' => $result->code))
    );

    // Put the ticket link on modified - 1 week and see if it gets cleaned up.
    $ticket_link = mediamosa_storage::get_uri_media_ticket_file($app_id_1, $stills['ticket_id']);

    // Must exists.
    $this->file_exists($ticket_link);
/*
    // Change it.
    $this->assertTrue(touch($ticket_link, time() - (60*60*24*7)), 'Changed modified date on file');

    // Run clean script.
    mediamosa_media_ticket::ticket_cleanup();

    // Must exists. FIXME: touch does not seem to work.
    //$this->file_not_exists($ticket_link);

    // Remove ACL rule.
    $parameters = array(
    );
    $this->setMediafileAcl($still_id, $parameters, 'Removing ACL on mediafile', array(), array(mediamosa_error::ERRORCODE_EMPTY_RESULT));
*/
  }
}
