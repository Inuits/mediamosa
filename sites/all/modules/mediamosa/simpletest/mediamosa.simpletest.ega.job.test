<?php
/**
 * @file
 * Test on the simple test job sub functions.
 */

class MediaMosaTestCaseEgaJobTest extends MediaMosaTestCaseEgaJob {
  // ---------------------------------------------------------------- Functions.
  public static function getInfo() {
    return array(
      'name' => 'SimpleTest - Job server environment.',
      'description' => 'Testing our parent simple test class for EUA (App) job environment.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_SIMPLETEST,
    );
  }

  // -------------------------------------------------------------------- Tests.
  public function testStillDelete() {

    //
    // Set up still.
    //

    // Create upload file.
    $a_upload = $this->uploadTestFile();
    $asset_id = $a_upload['asset_id'];
    $mediafile_id = $a_upload['mediafile_id'];

    // Create still job.
    $job_id = $this->createMediafileStill($mediafile_id);

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the stills.
    $stills = $this->getMediafileStill($mediafile_id);

    // Check the output
    $this->assertTrue(count($stills) == 1, 'One dimension result.');

    // Get first array.
    $stills = $stills[0];

    // Still id.
    $still_id = $stills['stills']['still_id'];

    //
    // Check.
    //

    // Db check.
    $count = mediamosa_db::db_query('SELECT COUNT(#mediafile_id) FROM {#mediamosa_asset_mediafile} WHERE #mediafile_id = :still_id AND #is_still = :is_still_true', array(
      '#mediafile_id' => mediamosa_asset_mediafile_db::ID,
      '#mediamosa_asset_mediafile' => mediamosa_asset_mediafile_db::TABLE_NAME,
      ':still_id' => $still_id,
      '#is_still' => mediamosa_asset_mediafile_db::IS_STILL,
      ':is_still_true' => mediamosa_asset_mediafile_db::IS_STILL_TRUE,
    ))->fetchField();
    $this->assertTrue(
      $count != 0,
      t("database lookup on still_id = @still_id (count = @count).", array('@still_id' => $still_id, '@count' => $count))
    );

    // File check.
    $mediafile_uri = mediamosa_storage::get_uri_mediafile($still_id);
    $this->assertTrue(
      mediamosa_io::file_exists($mediafile_uri),
      t("file lookup on @file.", array('@file' => mediamosa_io::realpath_safe($mediafile_uri)))
    );

    //
    // Delete still.
    //

    // File check for later check.
    $mediafile_uri = mediamosa_storage::get_uri_mediafile($still_id);

    // Delete still.
    $this->deleteStill($asset_id);

    //
    // Check.
    //

    // Db check.
    $count = mediamosa_db::db_query('SELECT COUNT(#mediafile_id) FROM {#mediamosa_asset_mediafile} WHERE #mediafile_id = :still_id AND #is_still = :is_still_true', array(
      '#mediafile_id' => mediamosa_asset_mediafile_db::ID,
      '#mediamosa_asset_mediafile' => mediamosa_asset_mediafile_db::TABLE_NAME,
      ':still_id' => $still_id,
      '#is_still' => mediamosa_asset_mediafile_db::IS_STILL,
      ':is_still_true' => mediamosa_asset_mediafile_db::IS_STILL_TRUE,
    ))->fetchField();
    $this->assertTrue(
      $count == 0,
      t("database lookup on still_id = @still_id (count = @count).", array('@still_id' => $still_id, '@count' => $count))
    );

    // Check file is gone.
    $this->file_not_exists($mediafile_uri);
  }
}
