<?php
// $Id$

 /**
  * @file
  * MediaMosa AWS S3 storage.
  */

/**
 * Implements hook_mediamosa_storage_info().
 */
function mediamosa_storage_s3_mediamosa_storage_info() {
  return array(mediamosa_storage_s3::NAME => array(
      'name' => t('AWS S3 storage'),
      'description' => t('The MediaMosa AWS S3 storage.'),
  ));
}

/**
 * Implements hook_mediamosa_storage_profile_load().
 */
function mediamosa_storage_s3_mediamosa_storage_profile_load($node) {
  $result = mediamosa_db::db_select(mediamosa_storage_s3_db::TABLE_NAME, 'p')
    ->condition(mediamosa_storage_profile_db::ID, $node->{mediamosa_storage_profile_db::ID})
    ->fields('p')
    ->execute()
    ->fetchAssoc();
  
  $node->{mediamosa_storage_s3_db::KEY} = $result[mediamosa_storage_s3_db::KEY];
  $node->{mediamosa_storage_s3_db::SECRET} = $result[mediamosa_storage_s3_db::SECRET];
  
  return $node;
}

/**
 * Implements hook_mediamosa_storage_profile_insert().
 */
function mediamosa_storage_s3_mediamosa_storage_profile_insert($node) {
  // Collect the data we want to insert.
  $fields = array();
  foreach (mediamosa_storage_s3_db::get_fields() as $field) {
    if (isset($node->{$field})) {
      $fields[$field] = $node->{$field};
    }
  }
  
  mediamosa_db::db_insert(mediamosa_storage_s3_db::TABLE_NAME)
    ->fields($fields)
    ->execute();
  
  //TODO: maybe do some other stuff before or after inserting?
}

/**
 * Implements hook_mediamosa_storage_profile_update().
 */
function mediamosa_storage_s3_mediamosa_storage_profile_update($node) {
  // Collect the data we want to update.
  $fields = array();
  foreach (mediamosa_storage_s3_db::get_fields() as $field) {
    if (isset($node->{$field})) {
      $fields[$field] = $node->{$field};
    }
  }

  mediamosa_db::db_update(mediamosa_storage_s3_db::TABLE_NAME)
    ->fields($fields)
    ->condition(mediamosa_storage_profile_db::ID, $node->{mediamosa_storage_profile_db::ID})
    ->execute();
  
  //TODO: maybe do some other stuff before or after updating?
}

/**
 * Implements hook_mediamosa_storage_profile_delete().
 */
function mediamosa_storage_s3_mediamosa_storage_profile_delete($node) {
  mediamosa_db::db_delete(mediamosa_storage_s3_db::TABLE_NAME)
    ->condition(mediamosa_storage_profile_db::ID, $node->{mediamosa_storage_profile_db::ID})
    ->execute();
  
  //TODO: maybe do some other stuff before or after deleting?
}

/**
 * Implements hook_mediamosa_storage_profile_view().
 */
function mediamosa_storage_s3_mediamosa_storage_profile_view($node, $view_mode = 'full') {
  $rows = array(
    array(t('AWS Access Key Id'), check_plain($node->{mediamosa_storage_s3_db::KEY})),
    array(t('AWS Secret Access Key'), '****************************************'),
  );

  return $rows;
}

/**
 * Implements hook_mediamosa_storage_profile_form().
 */
function mediamosa_storage_s3_mediamosa_storage_profile_form($node, $form_state) {
  $form = array();

  $form[mediamosa_storage_s3_db::KEY] = array(
    '#title' => t('AWS Key'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('The AWS Access Key Id.'),
    '#default_value' => mediamosa_node::default_value(mediamosa_storage_s3_db::KEY, $node),
    '#maxlength' => mediamosa_storage_s3_db::KEY_LENGTH,
  );
  
  $form[mediamosa_storage_s3_db::SECRET] = array(
    '#title' => t('AWS Secret'),
    '#type' => 'password',
    '#required' => TRUE,
    '#description' => t('The AWS Secret Access Key.'),
    //'#default_value' => mediamosa_node::default_value(mediamosa_storage_s3_db::SECRET, $node),
    '#maxlength' => mediamosa_storage_s3_db::SECRET_LENGTH,
  );
  
  return $form;
}

/**
* Implements hook_mediamosa_storage_profile_validate().
*/
function mediamosa_storage_s3_mediamosa_storage_profile_validate($node, $form, $form_state) {
  if(!libraries_load('awssdk')) {
    form_set_error('', t('Unable to load the AWS SDK. Please check if awssdk is installed correctly.'));
  }
  else if(!class_exists('AmazonS3')) {
    form_set_error('', t('Cannot load AmazonS3 class. Please check if awssdk is installed correctly'));
  }
  else {
    // Test the AWS connection
    try {
      $s3 = new AmazonS3(array('key' => $node->{mediamosa_storage_s3_db::KEY}, 'secret' => $node->{mediamosa_storage_s3_db::SECRET}));
      $user_id = $s3->get_canonical_user_id();
      if(!$user_id['id']) {
        form_set_error('', t('The S3 access credentials are invalid'));
      }
    }
    catch(RequestCore_Exception $e){
      if(strstr($e->getMessage(), 'SSL certificate problem')) {
        form_set_error('', t('There was a problem with the SSL certificate. Try setting AWS_CERTIFICATE_AUTHORITY to true in "libraries/awssdk/config.inc.php". You may also have a curl library (e.g. the default shipped with MAMP) that does not contain trust certificates for the major authorities.'));
      }
      else {
        form_set_error('', t('There was a problem connecting to S3'));
      }
    }
    catch(Exception $e) {
      form_set_error('', t('There was a problem connecting to S3'));
    }
  }
}
