<?php
/**
 * @file
 * Basic view, download test using the asset/view call for S3.
 */

// Registry indexes all .test files, while the base is not indexed (module is
// not on.
if (!class_exists('MediaMosaS3BaseTestCaseEga')) {
  return;
}

class MediaMosaS3MediaViewTestCaseEga extends MediaMosaS3BaseTestCaseEga {
  // ------------------------------------------------------------------ Methods.
  public static function getInfo() {
    // Only available when these are set.
    if (variable_get('mediamosa_storage_s3_simpletest_enable') && variable_get('mediamosa_storage_s3_simpletest_aws_key') && variable_get('mediamosa_storage_s3_simpletest_aws_key')) {
      return array(
        'name' => 'MediaMosa Storage - Amazon S3 media view calls',
        'description' => 'Test if download, play calls work correctly on S3.',
        'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_STORAGE,
      );
    }
    return array();
  }

  // -------------------------------------------------------------------- Tests.
  public function testPlayProxy() {
    // If s3 object is missing, stop the test.
    if (!$this->s3) {
      return;
    }

    // My app ID.
    $app_id = $this->a_app['app_id'];

    // Create default profile.
    $this->createS3Profile();

    // Get my default app storage.
    $storage_profile_app = mediamosa_storage_profile_app::get_app_storage_profile($app_id);
    $this->var_export($storage_profile_app);

    // Do upload.
    $upload = $this->uploadTestFile();
    $asset_id = $upload['asset_id'];
    $mediafile_id = $upload['mediafile_id'];

    // Parse the queue.
    $this->doQueueCycleAll();

    // Now transcode local file.
    // Create transcode job.
    $this->createMediafileTranscode($mediafile_id, array('profile_id' => $this->getDefaultTranscodeProfile()));

    // Parse the queue.
    $this->doQueueCycleAll();

    // Get the asset.
    $asset = $this->getAsset($asset_id);
    $this->var_export($asset);

    $mediafile_id_transcoded = NULL;
    foreach ($asset['mediafiles'] as $mediafile) {
      if (isset($mediafile[0])) {
        foreach ($mediafile as $mediafile_child) {
          if (!$mediafile_id_transcoded && $mediafile_child['mediafile_id'] != $mediafile_id) {
            $mediafile_id_transcoded = $mediafile_child['mediafile_id'];
            break 2;
          }
        }
      }
    }

    // Found transcode.
    $this->assertFalse(is_null($mediafile_id_transcoded), 'Found transcoded mediafile');

    // Get the mediafile.
    $mediafile = mediamosa_asset_mediafile::get($mediafile_id_transcoded);

    // Get uri.
    $mediafile_uri = mediamosa_storage::get_uri_mediafile($mediafile);
    $this->pass($mediafile_uri, 'MediaFile URI');

    // Need wrapper.
    $wrapper = mediamosa_io::require_stream_wrapper_instance_by_uri($mediafile_uri);

    // S3 must also be on public.
    $this->assertTrue($wrapper->get_acl() == MediaMosaAmazonS3::ACL_PUBLIC, 'S3: Is public');

    // Set the parameters.
    $parameters = array(
      mediamosa_rest_call_media_view::USER_ID => self::SIMPLETEST_USER_ID,
      mediamosa_rest_call_media_view::PROFILE_ID => $this->getDefaultTranscodeProfile(),
    );

    // Do view call.
    $xml = $this->do_media_view($asset_id, $parameters);

    // Items dump.
    $this->var_export($xml->items->item);

    // Get output.
    $url = $xml->items->item->output;

    // Get the file.
    $result = mediamosa_http::drupal_http_request($url);

    // Dump headers.
    $this->var_export($result->headers);

    // Must be from amazon.
    $this->assertTrue($result->headers['server'] == 'AmazonS3', 'File is from amazon S3');

    // Get filesize of mediafile.
    $filesize = mediamosa_asset_mediafile_metadata::get_mediafile_metadata_int($mediafile_id_transcoded, mediamosa_asset_mediafile_metadata::FILESIZE);

    $this->pass($filesize);

    // Content length must match filesize.
    $this->assertTrue($result->headers['content-length'] == $filesize, 'Downloaded has same filesize as transcoded');

    // Check response.
    $this->assertTrue(
      $result->code == 200,
      t("Trigger the test video on S3 '@url' (code = @code)", array('@url' => $url, '@code' => $result->code))
    );

    // Free some mem.
    $result->data = '';

    // Now set ACL on mediafile.
    $this->setMediafileAcl(
      $mediafile_id_transcoded,
      array(mediamosa_rest_call_acl_mediafile_set_rights::ACL_REALM => '@foo.nl')
    );

    $parameters = array(
      mediamosa_rest_call_media_view::USER_ID => 'foo',
      mediamosa_rest_call_media_view::PROFILE_ID => $this->getDefaultTranscodeProfile(),
    );

    // Do basic media play call.
    $this->do_media_view($asset_id, $parameters, array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));

    $parameters = array(
      mediamosa_rest_call_media_view::USER_ID => 'foo',
      mediamosa_rest_call_media_view::PROFILE_ID => $this->getDefaultTranscodeProfile(),
      mediamosa_rest_call_media_view::ACL_REALM => '@foo.nl',
    );

    // Again but with rights.
    $xml = $this->do_media_view($asset_id, $parameters);

    // Items dump.
    $this->var_export($xml->items->item);

    // Get output.
    $url = $xml->items->item->output;

    // Get the file.
    $result = mediamosa_http::drupal_http_request($url);

    // Dump headers.
    $this->var_export($result->headers);

    // Must be from amazon.
    $this->assertTrue($result->headers['server'] == 'AmazonS3', 'File is from amazon S3');

    // Content length must match filesize.
    $this->assertTrue($result->headers['content-length'] == $filesize, 'Downloaded has same filesize as transcoded');
  }
}
